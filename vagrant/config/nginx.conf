# nginx.conf
#
# This is *the* config file for nginx in the virtual machine, and it
# should probably not be altered often as most things are already
# setup. If you do find yourself altering something here, you may want
# to consider discussing it at the repo so we can share in your findings

# User to run nginx as
user    www-data;

# Default to number of CPU cores available
worker_processes  auto;

# Default error log file
error_log   /var/log/nginx/error.log;

# Nginx process identifier
pid     /var/run/nginx.pid;

# The EventsModule controls how Nginx deals with connections
events {
    # max clients = worker_processes (CPUs) * worker_connections
    worker_connections  2000;
}

# The HttpCoreModule controls core features of Nginx's HTTP processing
http {
    
    # Define MIME types for files
    include      /etc/nginx/mime.types;
    default_type application/octet-stream;

    # Default log file
    access_log  /var/log/nginx/access.log;

    # Turn sendfile off in a virtual machine because of issues
    #
    # The nginx default for sendfile is on, which appears to not jive with something
    # about the VM for some things, causing weird encoding issues in Javascript
    # that create syntax errors and weird encoding issues in CSS that make it seem
    # like your file has been cached forever. Crazy stuff - so off it is.
    #
    # See - http://jeremyfelt.com/code/2013/01/08/clear-nginx-cache-in-vagrant/
    #
    # Note that this should most likely be turned on in a production environment
    sendfile            off;

    # Don't send out partial TCP frames
    tcp_nopush          on;

    # Merge smaller TCP packets into one larger packet
    tcp_nodelay        off;

    # How long each connection should stay idle
    keepalive_timeout   5;

    # Hide nginx version information
    server_tokens       off;

    # Enable Gzip compression
    gzip          on;

    # Compression level (1-9)
    gzip_comp_level     5;

    # Don't compress anything under 256 bytes
    gzip_min_length     256;

    # Compress output of these MIME-types
    gzip_types
        application/atom+xml
        application/javascript
        application/json
        application/rss+xml
        application/vnd.ms-fontobject
        application/x-font-ttf
        application/x-javascript
        application/x-web-app-manifest+json
        application/xhtml+xml
        application/xml
        font/opentype
        image/svg+xml
        image/x-icon
        text/css
        text/plain
        text/x-component;

    # Disable gzip for bad browsers
    gzip_disable  "MSIE [1-6]\.(?!.*SV1)";

    # Upstream to abstract backend connection(s) for PHP.
    upstream php {
           server unix:/var/run/php5-fpm.sock;
    }

    # If the requested body size is more than the buffer size, the entire body is
    # written to a temporary file. Default is 8k or 16k depending on the platform.
    client_body_buffer_size 16k;

    # If a request line or header field does not fit into this buffer, then larger
    # buffers via large_client_header_buffers are allocated
    client_header_buffer_size 1k;

    # Max size of a body to allow. This affects uploads, but can be overwritten at
    # the individual site level
    client_max_body_size 50M;

    # The maximum number and size of large headers to accept from a client
    large_client_header_buffers 4 16k;

    # Make Nginx aware of our default SSL certificates
    ssl_certificate     /etc/nginx/server.crt;
    ssl_certificate_key /etc/nginx/server.key;

    location / {
        index index.php;
        try_files $uri $uri/ /index.php?$args;
    }

	location ~ \.php$ {
        # Try the files specified in order. In our case, try the requested URI and if
        # that fails, try (successfully) to pass a 404 error.
        try_files      $uri =404;

        # Include the fastcgi_params defaults provided by nginx
        include        /etc/nginx/fastcgi_params;

        # The amount of time for upstream to wait for a fastcgi process to send data.
        # We keep this *extremely* high so that one can be lazy when remote debugging.
        fastcgi_read_timeout 3600s;

        # Buffer size for reading the header of the backend FastCGI process.
        # This defaults to the value of a single fastcgi_buffers, so does not
        # need to be specified in our case, but it's good to be explicit.
        fastcgi_buffer_size 128k;

        # The number and size of the buffers into which the reply from the FastCGI
        # process in the backend is read.
        #
        # 4 buffers at 128k means that any reply by FastCGI greater than 512k goes
        # to disk and replies under 512k are handled directly in memory.
        fastcgi_buffers 4 128k;

        # SCRIPT_FILENAME is a required parameter for things to work properly,
        # but was missing in the default fastcgi_params on upgrade to nginx 1.4.
        # We define it here to be sure that it exists.
        fastcgi_param   SCRIPT_FILENAME         $document_root$fastcgi_script_name;

        # Use the upstream for php5-fpm that we defined in nginx.conf
        fastcgi_pass   php;

        # And get to serving the file!
        fastcgi_index  index.php;
    }
}